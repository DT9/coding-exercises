#!/bin/bash

# Penetration Testing Tools Installation Script
# Compatible with macOS (Homebrew) and Linux (apt/yum)
# Tools: nmap, curl, jq, httpie, awscli, zap, docker, terraform

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    log "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &> /dev/null; then
            echo "ubuntu"
        elif command -v yum &> /dev/null; then
            echo "rhel"
        elif command -v pacman &> /dev/null; then
            echo "arch"
        else
            echo "linux"
        fi
    else
        echo "unknown"
    fi
}

# Function to check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Function to install Homebrew on macOS
install_homebrew() {
    if ! command_exists brew; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ -d "/opt/homebrew" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        
        log_success "Homebrew installed successfully"
    else
        log_info "Homebrew already installed, updating..."
        brew update
    fi
}

# Function to install tools on macOS
install_macos_tools() {
    log_info "Installing penetration testing tools on macOS..."
    
    # Install Homebrew if not present
    install_homebrew
    
    # Core networking tools
    if ! command_exists nmap; then
        log_info "Installing nmap..."
        brew install nmap
        log_success "nmap installed"
    else
        log_info "nmap already installed"
    fi
    
    # HTTP tools
    if ! command_exists curl; then
        log_info "Installing curl..."
        brew install curl
        log_success "curl installed"
    else
        log_info "curl already installed"
    fi
    
    if ! command_exists http; then
        log_info "Installing HTTPie..."
        brew install httpie
        log_success "HTTPie installed"
    else
        log_info "HTTPie already installed"
    fi
    
    # JSON processing
    if ! command_exists jq; then
        log_info "Installing jq..."
        brew install jq
        log_success "jq installed"
    else
        log_info "jq already installed"
    fi
    
    # AWS CLI
    if ! command_exists aws; then
        log_info "Installing AWS CLI..."
        brew install awscli
        log_success "AWS CLI installed"
    else
        log_info "AWS CLI already installed"
    fi
    
    # Docker
    if ! command_exists docker; then
        log_info "Installing Docker..."
        brew install --cask docker
        log_success "Docker installed (Docker Desktop)"
        log_warning "Please start Docker Desktop manually"
    else
        log_info "Docker already installed"
    fi
    
    # Terraform
    if ! command_exists terraform; then
        log_info "Installing Terraform..."
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform
        log_success "Terraform installed"
    else
        log_info "Terraform already installed"
    fi
    
    # Additional security tools
    log_info "Installing additional security tools..."
    
    # Nikto web vulnerability scanner
    if ! command_exists nikto; then
        log_info "Installing Nikto..."
        brew install nikto
        log_success "Nikto installed"
    else
        log_info "Nikto already installed"
    fi
    
    # Sqlmap for SQL injection testing
    if ! command_exists sqlmap; then
        log_info "Installing sqlmap..."
        brew install sqlmap
        log_success "sqlmap installed"
    else
        log_info "sqlmap already installed"
    fi
    
    # Gobuster for directory enumeration
    if ! command_exists gobuster; then
        log_info "Installing Gobuster..."
        brew install gobuster
        log_success "Gobuster installed"
    else
        log_info "Gobuster already installed"
    fi
}

# Function to install tools on Ubuntu/Debian
install_ubuntu_tools() {
    log_info "Installing penetration testing tools on Ubuntu/Debian..."
    
    # Update package lists
    log_info "Updating package lists..."
    sudo apt-get update
    
    # Core networking tools
    if ! command_exists nmap; then
        log_info "Installing nmap..."
        sudo apt-get install -y nmap
        log_success "nmap installed"
    else
        log_info "nmap already installed"
    fi
    
    # HTTP tools
    if ! command_exists curl; then
        log_info "Installing curl..."
        sudo apt-get install -y curl
        log_success "curl installed"
    else
        log_info "curl already installed"
    fi
    
    if ! command_exists http; then
        log_info "Installing HTTPie..."
        sudo apt-get install -y httpie
        log_success "HTTPie installed"
    else
        log_info "HTTPie already installed"
    fi
    
    # JSON processing
    if ! command_exists jq; then
        log_info "Installing jq..."
        sudo apt-get install -y jq
        log_success "jq installed"
    else
        log_info "jq already installed"
    fi
    
    # AWS CLI
    if ! command_exists aws; then
        log_info "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        rm -rf aws awscliv2.zip
        log_success "AWS CLI installed"
    else
        log_info "AWS CLI already installed"
    fi
    
    # Docker
    if ! command_exists docker; then
        log_info "Installing Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        rm get-docker.sh
        log_success "Docker installed"
        log_warning "Please log out and back in for Docker group permissions"
    else
        log_info "Docker already installed"
    fi
    
    # Terraform
    if ! command_exists terraform; then
        log_info "Installing Terraform..."
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update && sudo apt-get install -y terraform
        log_success "Terraform installed"
    else
        log_info "Terraform already installed"
    fi
    
    # Additional security tools
    log_info "Installing additional security tools..."
    
    # Nikto
    if ! command_exists nikto; then
        log_info "Installing Nikto..."
        sudo apt-get install -y nikto
        log_success "Nikto installed"
    else
        log_info "Nikto already installed"
    fi
    
    # Sqlmap
    if ! command_exists sqlmap; then
        log_info "Installing sqlmap..."
        sudo apt-get install -y sqlmap
        log_success "sqlmap installed"
    else
        log_info "sqlmap already installed"
    fi
    
    # Gobuster
    if ! command_exists gobuster; then
        log_info "Installing Gobuster..."
        sudo apt-get install -y gobuster
        log_success "Gobuster installed"
    else
        log_info "Gobuster already installed"
    fi
    
    # dirb for directory enumeration
    if ! command_exists dirb; then
        log_info "Installing dirb..."
        sudo apt-get install -y dirb
        log_success "dirb installed"
    else
        log_info "dirb already installed"
    fi
}

# Function to install tools on RHEL/CentOS/Fedora
install_rhel_tools() {
    log_info "Installing penetration testing tools on RHEL/CentOS/Fedora..."
    
    # Enable EPEL repository for additional packages
    if command_exists yum; then
        sudo yum install -y epel-release
        PACKAGE_MANAGER="yum"
    elif command_exists dnf; then
        sudo dnf install -y epel-release
        PACKAGE_MANAGER="dnf"
    else
        log_error "No supported package manager found"
        exit 1
    fi
    
    # Core networking tools
    if ! command_exists nmap; then
        log_info "Installing nmap..."
        sudo $PACKAGE_MANAGER install -y nmap
        log_success "nmap installed"
    else
        log_info "nmap already installed"
    fi
    
    # HTTP tools
    if ! command_exists curl; then
        log_info "Installing curl..."
        sudo $PACKAGE_MANAGER install -y curl
        log_success "curl installed"
    else
        log_info "curl already installed"
    fi
    
    # JSON processing
    if ! command_exists jq; then
        log_info "Installing jq..."
        sudo $PACKAGE_MANAGER install -y jq
        log_success "jq installed"
    else
        log_info "jq already installed"
    fi
    
    # AWS CLI
    if ! command_exists aws; then
        log_info "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        rm -rf aws awscliv2.zip
        log_success "AWS CLI installed"
    else
        log_info "AWS CLI already installed"
    fi
    
    # Docker
    if ! command_exists docker; then
        log_info "Installing Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
        sudo systemctl enable docker
        sudo systemctl start docker
        rm get-docker.sh
        log_success "Docker installed"
    else
        log_info "Docker already installed"
    fi
    
    # Terraform
    if ! command_exists terraform; then
        log_info "Installing Terraform..."
        sudo $PACKAGE_MANAGER install -y yum-utils
        sudo $PACKAGE_MANAGER config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        sudo $PACKAGE_MANAGER install -y terraform
        log_success "Terraform installed"
    else
        log_info "Terraform already installed"
    fi
}

# Function to install Python-based security tools
install_python_tools() {
    log_info "Installing Python-based security tools..."
    
    # Check if Python 3 is installed
    if ! command_exists python3; then
        log_error "Python 3 is required but not installed"
        return 1
    fi
    
    # Install pip if not present
    if ! command_exists pip3; then
        log_info "Installing pip3..."
        if [[ "$OS" == "ubuntu" ]]; then
            sudo apt-get install -y python3-pip
        elif [[ "$OS" == "rhel" ]]; then
            sudo $PACKAGE_MANAGER install -y python3-pip
        elif [[ "$OS" == "macos" ]]; then
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py --user
            rm get-pip.py
        fi
    fi
    
    # OWASP ZAP Python API
    log_info "Installing OWASP ZAP Python API..."
    pip3 install --user zaproxy
    log_success "ZAP Python API installed"
    
    # Additional Python security tools
    log_info "Installing additional Python security tools..."
    
    # SSLyze for SSL/TLS testing
    pip3 install --user sslyze
    log_success "SSLyze installed"
    
    # Requests for HTTP testing
    pip3 install --user requests
    log_success "Requests installed"
    
    # Paramiko for SSH testing
    pip3 install --user paramiko
    log_success "Paramiko installed"
    
    # WhatWeb for web application fingerprinting
    if [[ "$OS" == "ubuntu" ]]; then
        sudo apt-get install -y whatweb
    elif [[ "$OS" == "macos" ]]; then
        brew install whatweb
    fi
}

# Function to install OWASP ZAP
install_zap() {
    log_info "Installing OWASP ZAP..."
    
    if [[ "$OS" == "macos" ]]; then
        # Install ZAP using Homebrew cask
        brew install --cask owasp-zap
        log_success "OWASP ZAP installed via Homebrew"
    elif [[ "$OS" == "ubuntu" ]]; then
        # Download and install ZAP for Linux
        ZAP_VERSION="2.14.0"
        ZAP_URL="https://github.com/zaproxy/zaproxy/releases/download/v${ZAP_VERSION}/ZAP_${ZAP_VERSION}_Linux.tar.gz"
        
        cd /tmp
        wget "$ZAP_URL" -O zap.tar.gz
        tar -xzf zap.tar.gz
        sudo mv ZAP_${ZAP_VERSION} /opt/zaproxy
        sudo ln -sf /opt/zaproxy/zap.sh /usr/local/bin/zap
        rm zap.tar.gz
        
        log_success "OWASP ZAP installed to /opt/zaproxy"
    else
        log_warning "Manual ZAP installation required for this OS"
        log_info "Download from: https://www.zaproxy.org/download/"
    fi
}

# Function to install Burp Suite Community Edition
install_burp() {
    log_info "Installing Burp Suite Community Edition..."
    
    if [[ "$OS" == "macos" ]]; then
        brew install --cask burp-suite
        log_success "Burp Suite installed via Homebrew"
    else
        log_warning "Manual Burp Suite installation required"
        log_info "Download from: https://portswigger.net/burp/communitydownload"
    fi
}

# Function to create tool verification script
create_verification_script() {
    log_info "Creating tool verification script..."
    
    cat > verify_pentest_tools.sh << 'EOF'
#!/bin/bash

# Penetration Testing Tools Verification Script

echo "=== Penetration Testing Tools Verification ==="
echo

# Core tools
tools=(
    "nmap:Network scanning"
    "curl:HTTP client"
    "jq:JSON processor"
    "http:HTTPie client"
    "aws:AWS CLI"
    "docker:Container platform"
    "terraform:Infrastructure as code"
)

# Security tools
security_tools=(
    "nikto:Web vulnerability scanner"
    "sqlmap:SQL injection testing"
    "gobuster:Directory enumeration"
    "zap:OWASP ZAP (may not be in PATH)"
)

# Python tools
python_tools=(
    "sslyze:SSL/TLS testing"
)

check_tool() {
    local tool=$1
    local description=$2
    
    if command -v "$tool" &> /dev/null; then
        version=$(command "$tool" --version 2>/dev/null | head -n1 || echo "Unknown version")
        echo "✅ $tool - $description ($version)"
        return 0
    else
        echo "❌ $tool - $description (Not found)"
        return 1
    fi
}

check_python_module() {
    local module=$1
    local description=$2
    
    if python3 -c "import $module" 2>/dev/null; then
        echo "✅ $module - $description (Python module)"
        return 0
    else
        echo "❌ $module - $description (Python module not found)"
        return 1
    fi
}

echo "Core Tools:"
for tool_info in "${tools[@]}"; do
    IFS=':' read -r tool description <<< "$tool_info"
    check_tool "$tool" "$description"
done

echo
echo "Security Tools:"
for tool_info in "${security_tools[@]}"; do
    IFS=':' read -r tool description <<< "$tool_info"
    check_tool "$tool" "$description"
done

echo
echo "Python Security Modules:"
check_python_module "zaproxy" "OWASP ZAP Python API"
check_python_module "sslyze" "SSL/TLS testing"
check_python_module "requests" "HTTP library"
check_python_module "paramiko" "SSH library"

echo
echo "=== Verification Complete ==="
EOF

    chmod +x verify_pentest_tools.sh
    log_success "Verification script created: verify_pentest_tools.sh"
}

# Function to create usage examples
create_usage_examples() {
    log_info "Creating usage examples..."
    
    cat > pentest_examples.md << 'EOF'
# Penetration Testing Tools Usage Examples

## Network Scanning with Nmap

```bash
# Basic port scan
nmap -sS -sV target.com

# Comprehensive scan
nmap -sS -sV -sC -O -A -p- target.com

# UDP scan
nmap -sU -p 53,67,68,161,162 target.com

# Script scan for vulnerabilities
nmap --script vuln target.com
```

## Web Application Testing

### HTTPie Examples
```bash
# GET request with headers
http GET https://api.example.com/users Authorization:"Bearer token"

# POST request with JSON data
http POST https://api.example.com/users name="John" email="john@example.com"

# Form data submission
http --form POST https://example.com/login username=admin password=secret
```

### cURL Examples
```bash
# Basic GET request
curl -H "Authorization: Bearer token" https://api.example.com/users

# POST with JSON data
curl -X POST -H "Content-Type: application/json" \
  -d '{"name":"John","email":"john@example.com"}' \
  https://api.example.com/users

# Follow redirects and show headers
curl -L -I https://example.com
```

## Directory Enumeration

### Gobuster
```bash
# Directory enumeration
gobuster dir -u https://example.com -w /usr/share/wordlists/dirb/common.txt

# Subdomain enumeration
gobuster dns -d example.com -w /usr/share/wordlists/subdomains.txt

# Virtual host enumeration
gobuster vhost -u https://example.com -w /usr/share/wordlists/subdomains.txt
```

## SQL Injection Testing

### SQLMap
```bash
# Basic SQL injection test
sqlmap -u "https://example.com/page?id=1" --batch

# Test POST parameters
sqlmap -u "https://example.com/login" --data="username=admin&password=secret" --batch

# Dump database
sqlmap -u "https://example.com/page?id=1" --dump --batch
```

## Web Vulnerability Scanning

### Nikto
```bash
# Basic web server scan
nikto -h https://example.com

# Scan with specific port
nikto -h https://example.com -p 8080

# Output to file
nikto -h https://example.com -o results.txt
```

## SSL/TLS Testing

### SSLyze
```bash
# Basic SSL scan
python3 -m sslyze example.com

# Comprehensive SSL test
python3 -m sslyze --regular example.com:443

# Check for specific vulnerabilities
python3 -m sslyze --heartbleed --robot example.com
```

## Container Security

### Docker Security Scan
```bash
# Scan Docker image for vulnerabilities
docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
  aquasec/trivy image your-image:tag

# Scan filesystem
docker run --rm -v $PWD:/path aquasec/trivy fs /path
```

## AWS Security Assessment

### AWS CLI Security Commands
```bash
# List IAM users
aws iam list-users

# Check S3 bucket permissions
aws s3api get-bucket-acl --bucket bucket-name

# List security groups
aws ec2 describe-security-groups

# Check CloudTrail status
aws cloudtrail describe-trails
```

## OWASP ZAP Automation

### ZAP Python API
```python
from zapv2 import ZAPv2

# Connect to ZAP
zap = ZAPv2(proxies={'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'})

# Spider target
zap.spider.scan('https://example.com')

# Active scan
zap.ascan.scan('https://example.com')

# Generate report
with open('zap_report.html', 'w') as f:
    f.write(zap.core.htmlreport())
```

## JSON Processing with jq

```bash
# Pretty print JSON
curl -s https://api.example.com/users | jq '.'

# Extract specific fields
curl -s https://api.example.com/users | jq '.[].email'

# Filter results
curl -s https://api.example.com/users | jq '.[] | select(.role == "admin")'

# Count items
curl -s https://api.example.com/users | jq 'length'
```

## Automated Testing Script Example

```bash
#!/bin/bash

TARGET="example.com"
OUTPUT_DIR="pentest_results_$(date +%Y%m%d_%H%M%S)"

mkdir -p "$OUTPUT_DIR"

# Network scan
nmap -sS -sV -sC -oA "$OUTPUT_DIR/nmap_scan" "$TARGET"

# Web vulnerability scan
nikto -h "https://$TARGET" -o "$OUTPUT_DIR/nikto_results.txt"

# Directory enumeration
gobuster dir -u "https://$TARGET" -w /usr/share/wordlists/dirb/common.txt \
  -o "$OUTPUT_DIR/gobuster_results.txt"

# SSL/TLS test
python3 -m sslyze "$TARGET" > "$OUTPUT_DIR/sslyze_results.txt"

echo "Penetration testing completed. Results in: $OUTPUT_DIR"
```
EOF

    log_success "Usage examples created: pentest_examples.md"
}

# Main installation function
main() {
    echo -e "${BLUE}"
    echo "=============================================="
    echo "  Penetration Testing Tools Installation"
    echo "=============================================="
    echo -e "${NC}"
    
    # Detect operating system
    OS=$(detect_os)
    log_info "Detected OS: $OS"
    
    case $OS in
        "macos")
            install_macos_tools
            ;;
        "ubuntu")
            install_ubuntu_tools
            ;;
        "rhel")
            install_rhel_tools
            ;;
        *)
            log_error "Unsupported operating system: $OS"
            log_info "Please install tools manually or contribute support for your OS"
            exit 1
            ;;
    esac
    
    # Install Python-based tools
    install_python_tools
    
    # Install OWASP ZAP
    install_zap
    
    # Install Burp Suite (optional)
    read -p "Install Burp Suite Community Edition? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        install_burp
    fi
    
    # Create verification and usage scripts
    create_verification_script
    create_usage_examples
    
    log_success "Installation completed!"
    echo
    echo -e "${GREEN}Next steps:${NC}"
    echo "1. Run ./verify_pentest_tools.sh to verify installations"
    echo "2. Check pentest_examples.md for usage examples"
    echo "3. Configure AWS CLI: aws configure"
    echo "4. Start Docker if not running: sudo systemctl start docker (Linux) or Docker Desktop (macOS)"
    echo
    echo -e "${YELLOW}Note:${NC} Some tools may require additional configuration or manual download"
    echo "Refer to the individual tool documentation for advanced setup"
}

# Check if script is being run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi