#!/bin/bash

# Twenty CRM Penetration Testing Script
# Uses: nmap, zap-cli, awscli, curl, httpie, jq
# Target: http://localhost:3000

set -e

# Configuration
TARGET_URL="http://localhost:3000"
TARGET_HOST="localhost"
TARGET_PORT="3000"
REPORT_DIR="./pentest_results"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}===================================================${NC}"
echo -e "${BLUE}    Twenty CRM Penetration Testing Script${NC}"
echo -e "${BLUE}===================================================${NC}"
echo -e "Target: ${TARGET_URL}"
echo -e "Timestamp: ${TIMESTAMP}"
echo ""

# Create results directory
mkdir -p "$REPORT_DIR"

# Function to log with timestamp
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to check if command exists
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}Error: $1 is not installed${NC}"
        exit 1
    fi
}

# Check required tools
log "${YELLOW}Checking required tools...${NC}"
check_command "nmap"
check_command "curl"
check_command "jq"

# Check if ZAP is available
if ! command -v "zap-cli" &> /dev/null; then
    echo -e "${YELLOW}Warning: zap-cli not found. ZAP scanning will be skipped.${NC}"
    ZAP_AVAILABLE=false
else
    ZAP_AVAILABLE=true
fi

# Check if AWS CLI is available
if ! command -v "aws" &> /dev/null; then
    echo -e "${YELLOW}Warning: awscli not found. AWS enumeration will be skipped.${NC}"
    AWS_AVAILABLE=false
else
    AWS_AVAILABLE=true
fi

# 1. Network Discovery and Port Scanning
log "${GREEN}1. Running Network Discovery and Port Scanning...${NC}"
echo "=== Network Discovery and Port Scanning ===" > "$REPORT_DIR/nmap_scan_${TIMESTAMP}.txt"

# Quick port scan
nmap -sS -sV -O -T4 -p- "$TARGET_HOST" >> "$REPORT_DIR/nmap_scan_${TIMESTAMP}.txt" 2>&1 || true

# Service detection
nmap -sC -sV -p "$TARGET_PORT" "$TARGET_HOST" >> "$REPORT_DIR/nmap_scan_${TIMESTAMP}.txt" 2>&1 || true

log "Network scan completed. Results saved to $REPORT_DIR/nmap_scan_${TIMESTAMP}.txt"

# 2. Web Application Enumeration
log "${GREEN}2. Running Web Application Enumeration...${NC}"
echo "=== Web Application Enumeration ===" > "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"

# Basic application info
echo "--- Application Response Headers ---" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
curl -I "$TARGET_URL" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt" 2>&1 || true

echo -e "\n--- Application Health Check ---" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
curl -s "$TARGET_URL/healthz" | jq . >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt" 2>&1 || curl -s "$TARGET_URL/healthz" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt" 2>&1 || true

# Common endpoints discovery
echo -e "\n--- Common Endpoints Discovery ---" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
COMMON_PATHS=(
    "/"
    "/api"
    "/graphql"
    "/admin"
    "/login"
    "/register"
    "/users"
    "/health"
    "/healthz"
    "/status"
    "/info"
    "/version"
    "/api/v1"
    "/api/graphql"
    "/robots.txt"
    "/sitemap.xml"
    "/.env"
    "/config"
    "/debug"
    "/test"
)

for path in "${COMMON_PATHS[@]}"; do
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$path" 2>/dev/null || echo "000")
    if [[ "$response_code" != "404" && "$response_code" != "000" ]]; then
        echo "$path: HTTP $response_code" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
        
        # Get detailed response for interesting endpoints
        if [[ "$response_code" == "200" || "$response_code" == "301" || "$response_code" == "302" ]]; then
            echo "--- Response for $path ---" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
            curl -s "$TARGET_URL$path" | head -20 >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt" 2>&1 || true
            echo "" >> "$REPORT_DIR/web_enum_${TIMESTAMP}.txt"
        fi
    fi
done

log "Web enumeration completed. Results saved to $REPORT_DIR/web_enum_${TIMESTAMP}.txt"

# 3. Authentication Testing
log "${GREEN}3. Running Authentication Testing...${NC}"
echo "=== Authentication Testing ===" > "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"

# Test for GraphQL endpoint
echo "--- GraphQL Introspection Test ---" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"
curl -s -X POST "$TARGET_URL/graphql" \
    -H "Content-Type: application/json" \
    -d '{"query":"query IntrospectionQuery { __schema { queryType { name } } }"}' \
    >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt" 2>&1 || true

# Test for authentication bypass
echo -e "\n--- Authentication Bypass Tests ---" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"

# Try accessing protected endpoints without authentication
PROTECTED_ENDPOINTS=(
    "/api/graphql"
    "/api/users"
    "/api/companies"
    "/api/contacts"
    "/admin"
    "/dashboard"
)

for endpoint in "${PROTECTED_ENDPOINTS[@]}"; do
    echo "Testing $endpoint without authentication:" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$endpoint" 2>/dev/null || echo "000")
    echo "Response code: $response_code" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"
    
    if [[ "$response_code" == "200" ]]; then
        echo "POTENTIAL VULNERABILITY: Endpoint accessible without authentication" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"
        curl -s "$TARGET_URL$endpoint" | head -10 >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt" 2>&1 || true
    fi
    echo "" >> "$REPORT_DIR/auth_test_${TIMESTAMP}.txt"
done

log "Authentication testing completed. Results saved to $REPORT_DIR/auth_test_${TIMESTAMP}.txt"

# 4. Input Validation Testing
log "${GREEN}4. Running Input Validation Testing...${NC}"
echo "=== Input Validation Testing ===" > "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"

# SQL Injection payloads
SQL_PAYLOADS=(
    "' OR '1'='1"
    "'; DROP TABLE users; --"
    "1' UNION SELECT NULL,NULL,NULL--"
    "admin'--"
    "' OR 1=1--"
)

echo "--- SQL Injection Tests ---" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"

# Test GraphQL for SQL injection
for payload in "${SQL_PAYLOADS[@]}"; do
    echo "Testing payload: $payload" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"
    
    # GraphQL query with injection payload
    curl -s -X POST "$TARGET_URL/graphql" \
        -H "Content-Type: application/json" \
        -d "{\"query\":\"query { findManyCompanies(filter: { name: { eq: \\\"$payload\\\" } }) { edges { node { id name } } } }\"}" \
        >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt" 2>&1 || true
    echo "" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"
done

# XSS payloads
XSS_PAYLOADS=(
    "<script>alert('XSS')</script>"
    "<img src=x onerror=alert('XSS')>"
    "javascript:alert('XSS')"
    "<svg onload=alert('XSS')>"
)

echo -e "\n--- XSS Tests ---" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"

for payload in "${XSS_PAYLOADS[@]}"; do
    echo "Testing XSS payload: $payload" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"
    
    # Test in various parameters
    curl -s "$TARGET_URL/?search=$payload" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt" 2>&1 || true
    echo "" >> "$REPORT_DIR/input_validation_${TIMESTAMP}.txt"
done

log "Input validation testing completed. Results saved to $REPORT_DIR/input_validation_${TIMESTAMP}.txt"

# 5. Information Disclosure Testing
log "${GREEN}5. Running Information Disclosure Testing...${NC}"
echo "=== Information Disclosure Testing ===" > "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"

# Check for sensitive files
SENSITIVE_FILES=(
    "/.env"
    "/config.json"
    "/package.json"
    "/docker-compose.yml"
    "/.git/config"
    "/backup.sql"
    "/database.sql"
    "/logs/error.log"
    "/logs/access.log"
)

echo "--- Sensitive File Access Tests ---" >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"

for file in "${SENSITIVE_FILES[@]}"; do
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET_URL$file" 2>/dev/null || echo "000")
    if [[ "$response_code" == "200" ]]; then
        echo "POTENTIAL VULNERABILITY: $file is accessible (HTTP $response_code)" >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"
        curl -s "$TARGET_URL$file" | head -20 >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt" 2>&1 || true
        echo "" >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"
    fi
done

# Check for verbose error messages
echo -e "\n--- Error Message Testing ---" >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"

# Trigger errors
curl -s -X POST "$TARGET_URL/graphql" \
    -H "Content-Type: application/json" \
    -d '{"query":"invalid query"}' \
    >> "$REPORT_DIR/info_disclosure_${TIMESTAMP}.txt" 2>&1 || true

log "Information disclosure testing completed. Results saved to $REPORT_DIR/info_disclosure_${TIMESTAMP}.txt"

# 6. Security Headers Analysis
log "${GREEN}6. Running Security Headers Analysis...${NC}"
echo "=== Security Headers Analysis ===" > "$REPORT_DIR/security_headers_${TIMESTAMP}.txt"

# Check for security headers
echo "--- Security Headers Check ---" >> "$REPORT_DIR/security_headers_${TIMESTAMP}.txt"

SECURITY_HEADERS=(
    "strict-transport-security"
    "content-security-policy"
    "x-frame-options"
    "x-content-type-options"
    "x-xss-protection"
    "referrer-policy"
    "permissions-policy"
)

headers_response=$(curl -I -s "$TARGET_URL" 2>&1 || true)
echo "$headers_response" >> "$REPORT_DIR/security_headers_${TIMESTAMP}.txt"

echo -e "\n--- Missing Security Headers ---" >> "$REPORT_DIR/security_headers_${TIMESTAMP}.txt"

for header in "${SECURITY_HEADERS[@]}"; do
    if ! echo "$headers_response" | grep -i "$header" > /dev/null; then
        echo "MISSING: $header" >> "$REPORT_DIR/security_headers_${TIMESTAMP}.txt"
    fi
done

log "Security headers analysis completed. Results saved to $REPORT_DIR/security_headers_${TIMESTAMP}.txt"

# 7. OWASP ZAP Scanning (if available)
if [ "$ZAP_AVAILABLE" = true ]; then
    log "${GREEN}7. Running OWASP ZAP Scanning...${NC}"
    echo "=== OWASP ZAP Scanning ===" > "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt"
    
    # Start ZAP daemon
    zap-cli start --start-options '-config api.disablekey=true' >> "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt" 2>&1 || true
    sleep 10
    
    # Spider the application
    zap-cli spider "$TARGET_URL" >> "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt" 2>&1 || true
    
    # Active scan
    zap-cli active-scan "$TARGET_URL" >> "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt" 2>&1 || true
    
    # Generate report
    zap-cli report -o "$REPORT_DIR/zap_report_${TIMESTAMP}.html" -f html >> "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt" 2>&1 || true
    
    # Stop ZAP
    zap-cli shutdown >> "$REPORT_DIR/zap_scan_${TIMESTAMP}.txt" 2>&1 || true
    
    log "OWASP ZAP scanning completed. Results saved to $REPORT_DIR/zap_scan_${TIMESTAMP}.txt"
else
    log "${YELLOW}7. OWASP ZAP Scanning skipped (zap-cli not available)${NC}"
fi

# 8. AWS Services Enumeration (if available)
if [ "$AWS_AVAILABLE" = true ]; then
    log "${GREEN}8. Running AWS Services Enumeration...${NC}"
    echo "=== AWS Services Enumeration ===" > "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt"
    
    # Check AWS credentials
    aws sts get-caller-identity >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt" 2>&1 || echo "No AWS credentials configured" >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt"
    
    # List S3 buckets (if credentials available)
    aws s3 ls >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt" 2>&1 || echo "No S3 access or no credentials" >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt"
    
    # List EC2 instances
    aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' --output table >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt" 2>&1 || echo "No EC2 access" >> "$REPORT_DIR/aws_enum_${TIMESTAMP}.txt"
    
    log "AWS enumeration completed. Results saved to $REPORT_DIR/aws_enum_${TIMESTAMP}.txt"
else
    log "${YELLOW}8. AWS Services Enumeration skipped (awscli not available)${NC}"
fi

# 9. Database Connection Testing
log "${GREEN}9. Running Database Connection Testing...${NC}"
echo "=== Database Connection Testing ===" > "$REPORT_DIR/db_test_${TIMESTAMP}.txt"

# Test PostgreSQL connection
echo "--- PostgreSQL Connection Test ---" >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt"

# Check if PostgreSQL port is accessible
nmap -p 5432 "$TARGET_HOST" >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt" 2>&1 || true

# Try to connect with default credentials (if psql is available)
if command -v psql &> /dev/null; then
    echo "Testing PostgreSQL connection with default credentials..." >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt"
    PGPASSWORD=postgres psql -h "$TARGET_HOST" -U postgres -d postgres -c "SELECT version();" >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt" 2>&1 || echo "Connection failed or access denied" >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt"
else
    echo "psql not available, skipping direct database connection test" >> "$REPORT_DIR/db_test_${TIMESTAMP}.txt"
fi

log "Database connection testing completed. Results saved to $REPORT_DIR/db_test_${TIMESTAMP}.txt"

# 10. Generate Summary Report
log "${GREEN}10. Generating Summary Report...${NC}"

cat > "$REPORT_DIR/pentest_summary_${TIMESTAMP}.json" << EOF
{
  "scan_info": {
    "target_url": "$TARGET_URL",
    "timestamp": "$TIMESTAMP",
    "scan_duration": "$(date)",
    "tools_used": ["nmap", "curl", "jq"]
  },
  "findings": {
    "critical": [],
    "high": [],
    "medium": [],
    "low": [],
    "info": []
  },
  "recommendations": [
    "Implement proper authentication for all API endpoints",
    "Add security headers (CSP, HSTS, X-Frame-Options)",
    "Implement input validation and sanitization",
    "Enable database encryption",
    "Implement proper error handling"
  ]
}
EOF

log "${GREEN}Penetration testing completed!${NC}"
echo ""
echo -e "${BLUE}Results saved in: $REPORT_DIR${NC}"
echo -e "${BLUE}Summary report: $REPORT_DIR/pentest_summary_${TIMESTAMP}.json${NC}"
echo ""
echo -e "${YELLOW}Manual review required for:${NC}"
echo "- Authentication bypass vulnerabilities"
echo "- Business logic flaws"
echo "- Privilege escalation"
echo "- Data exposure in GraphQL responses"
echo ""